name: Build, Test, and Deploy Feedback System

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  ARTIFACT_REGISTRY: ${{ secrets.ARTIFACT_REGISTRY }}
  GKE_CLUSTER: feedback-cluster
  GKE_ZONE: us-central1-a

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [producer, pipeline]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        cd ${{ matrix.service }}
        pip3 install -r requirements.txt
    
    - name: Run tests
      run: |
        cd ${{ matrix.service }}
        python3 -m pytest tests/ -v --cov=. --cov-report=xml
    
    - name: Upload coverage to Codecov
      if: matrix.service == 'producer'
      uses: codecov/codecov-action@v3
      with:
        file: ./producer/coverage.xml
        flags: producer
        name: producer-coverage
    
    - name: Upload coverage to Codecov
      if: matrix.service == 'pipeline'
      uses: codecov/codecov-action@v3
      with:
        file: ./pipeline/coverage.xml
        flags: pipeline
        name: pipeline-coverage

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Configure Docker to use gcloud as a credential helper
      run: |
        gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev
    
    - name: Build and push Producer image
      run: |
        cd producer
        docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY }}/feedback-producer:${{ github.sha }} .
        docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY }}/feedback-producer:${{ github.sha }}
        docker tag ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY }}/feedback-producer:${{ github.sha }} ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY }}/feedback-producer:latest
        docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY }}/feedback-producer:latest
    
    - name: Build and push Consumer image
      run: |
        cd pipeline
        docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY }}/feedback-consumer:${{ github.sha }} .
        docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY }}/feedback-consumer:${{ github.sha }}
        docker tag ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY }}/feedback-consumer:${{ github.sha }} ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY }}/feedback-consumer:latest
        docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY }}/feedback-consumer:latest

  terraform-plan:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Terraform Init
      run: |
        cd terraform
        terraform init
    
    - name: Terraform Plan
      run: |
        cd terraform
        terraform plan -var="project_id=${{ env.PROJECT_ID }}"
      env:
        TF_VAR_project_id: ${{ env.PROJECT_ID }}

  terraform-apply:
    needs: [test, build-and-push]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Terraform Init
      run: |
        cd terraform
        terraform init
    
    - name: Terraform Apply
      run: |
        cd terraform
        terraform apply -auto-approve -var="project_id=${{ env.PROJECT_ID }}"
      env:
        TF_VAR_project_id: ${{ env.PROJECT_ID }}

  deploy-to-gke:
    needs: [terraform-apply, build-and-push]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
    
    - name: Configure kubectl
      run: |
        gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} --zone ${{ env.GKE_ZONE }} --project ${{ env.PROJECT_ID }}
    
    - name: Update Kubernetes manifests with new image tags
      run: |
        # Update producer deployment
        sed -i "s|gcr.io/PROJECT_ID/feedback-producer:latest|${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY }}/feedback-producer:${{ github.sha }}|g" k8s/deployment.yaml
        sed -i "s|gcr.io/PROJECT_ID/feedback-consumer:latest|${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY }}/feedback-consumer:${{ github.sha }}|g" k8s/deployment.yaml
        sed -i "s|your-gcp-project-id|${{ env.PROJECT_ID }}|g" k8s/service.yaml
    
    - name: Deploy to GKE
      run: |
        kubectl apply -f k8s/service.yaml
        kubectl apply -f k8s/deployment.yaml
    
    - name: Wait for deployment to complete
      run: |
        kubectl rollout status deployment/feedback-producer -n feedback-system --timeout=300s
        kubectl rollout status deployment/feedback-consumer -n feedback-system --timeout=300s
    
    - name: Get service endpoints
      run: |
        echo "Producer service endpoint:"
        kubectl get service feedback-producer-service -n feedback-system
        echo ""
        echo "Deployment status:"
        kubectl get deployments -n feedback-system
        echo ""
        echo "Pod status:"
        kubectl get pods -n feedback-system

  security-scan:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY }}/feedback-producer:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
