version: '3.8'

services:
  feedback-producer:
    build:
      context: ./producer
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - GOOGLE_CLOUD_PROJECT=${GOOGLE_CLOUD_PROJECT}
      - PUBSUB_TOPIC=${PUBSUB_TOPIC:-customer-feedback}
      - PORT=8080
      - ENVIRONMENT=development
    volumes:
      - ./producer:/app
    depends_on:
      - redis
    networks:
      - feedback-network

  feedback-consumer:
    build:
      context: ./pipeline
      dockerfile: Dockerfile
    environment:
      - GOOGLE_CLOUD_PROJECT=${GOOGLE_CLOUD_PROJECT}
      - PUBSUB_SUBSCRIPTION=${PUBSUB_SUBSCRIPTION:-customer-feedback-sub}
      - SPANNER_INSTANCE_ID=${SPANNER_INSTANCE_ID:-feedback-instance}
      - SPANNER_DATABASE_ID=${SPANNER_DATABASE_ID:-feedback-db}
      - BIGQUERY_DATASET_ID=${BIGQUERY_DATASET_ID:-feedback_analysis}
      - BIGQUERY_TABLE_ID=${BIGQUERY_TABLE_ID:-feedback_analysis}
      - VERTEXAI_LOCATION=${VERTEXAI_LOCATION:-us-central1}
    volumes:
      - ./pipeline:/app
    depends_on:
      - redis
    networks:
      - feedback-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - feedback-network

  # Local development database (optional)
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=feedback_dev
      - POSTGRES_USER=feedback_user
      - POSTGRES_PASSWORD=feedback_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - feedback-network

volumes:
  postgres_data:

networks:
  feedback-network:
    driver: bridge
